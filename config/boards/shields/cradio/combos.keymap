/*								KEY POSITIONS
╭────────────────────╮ ╭────────────────────╮
│	0	1	2	3	4 │ │	5	6	7	8	9 │
│ 10	11	12	13	14 │ │ 15	16	17	18	19 │
│ 20	21	22	23	24 │ │ 25	26	27	28	29 │
╰───────────╮ 30	31 │ │ 32	33 ╭───────────╯
						╰────────╯ ╰────────╯						*/


compatible = "zmk,combos";

#define COMBO(NAME, BINDINGS, KEYPOS, LAYER) \
combo_##NAME { \
	bindings = <BINDINGS>; \
	key-positions = <KEYPOS>; \
	layers = <LAYER>; \
};


// #define LAYER_COMBO(NAME, BINDINGS, KEYPOS, LAYER) \
// combo_##NAME { \
// 	bindings = <BINDINGS>; \
// 	key-positions = <KEYPOS>; \
// 	layers = <LAYER>;
// };

// Text

/*	KEY POSITIONS
    ╭──────────────────────────────────────────╮    ╭───────────────────────────────────────────────╮
    | 0        1        2        3        4    |    |    5        6        7    (   8    )   9      |
    | one      two      three    four     five |    |    six      seven    eight    nine     zero   |
    | 10       11       12 d_wd  13 esc   14   |    |    15 esc   16       17       18       19     |
    | tab      [        ]        s(tab)   ent  |    |    ent      s(tab)   -        =        ;      |
    | 20 ct    21 cpy   22 pst   23 tild  24   |    |    25 s(`)  26      27        28 alt   29     |
    ╰──────────────────────────╮ 30  meh  31   |    |    32 rais  33 ╭─────────────────────────────╯
                              ╰────────────────╯    ╰───────────────╯
*/


// 
//     ╭──────────────────────────────────────────╮    ╭───────────────────────────────────────────────╮
//     | Q        W        E        R        T    |    |    Y        U        I    (   O    )   P      |
//     | one      two      three    four     five |    |    six      seven    eight    nine     zero   |
//     | A        S        D  d_wd  F  undo  G    |    |    H  redo  J        K        L        '  s   |
//     | tab      [        ]        s(tab)   ent  |    |    ent      s(tab)   -        =        ;      |
//     | Z ct     X  cpy   C  pst   V  tild  B    |    |    N  s(`)  M        ,        .  alt   ?      |
//     ╰──────────────────────────╮ NAV meh  BSPC |    |    SPC rais ENT ╭─────────────────────────────╯
//                               ╰────────────────╯    ╰────────────────╯

COMBO(qt, &to BT_L,0 4, BASE CMK NAV_L BT_L WIN_L W_NAV_L GAME)
COMBO(qg, &to GAME, 0 14, BASE CMK NAV_L BT_L WIN_L W_NAV_L GAME)
COMBO(qb, &to BT_L, 0 24, BASE CMK NAV_L BT_L WIN_L W_NAV_L GAME) 
COMBO(qp, &to WIN_L, 0 9, BASE CMK NAV_L BT_L WIN_L W_NAV_L GAME)

COMBO(outer_thumbs, &reset, 30 33, BASE CMK NAV_L BT_L WIN_L W_NAV_L GAME)  // both outer thumb keys
COMBO(left_thumbs, &kp LS(LC(LALT)), 30 31, BASE CMK NAV_L) // Both left thumb keys
COMBO(left_thumbs_win, &kp LALT, 30 31, WIN_L W_NAV_L) // Both left thumb keys on Windows
COMBO(right_thumbs, &sl FUN_L, 32 33, BASE CMK NAV_L WIN_L W_NAV_L GAME) // both right thumb keys

COMBO(inner_thumbs, &to BT_L, 31 32, BASE CMK NAV_L WIN_L W_NAV_L GAME) // both inner thumb keys 


// Numbers
COMBO(qa, &kp N1, 0 10, BASE CMK NAV_L WIN_L W_NAV_L GAME)
COMBO(ws, &kp N2, 1 11, BASE CMK NAV_L WIN_L W_NAV_L GAME)
COMBO(ed, &kp N3, 2 12, BASE CMK NAV_L WIN_L W_NAV_L GAME)
COMBO(rf, &kp N4, 3 13, BASE CMK NAV_L WIN_L W_NAV_L GAME)
COMBO(tg, &kp N5, 4 14, BASE CMK NAV_L WIN_L W_NAV_L GAME)
COMBO(yh, &kp N6, 5 15, BASE CMK NAV_L WIN_L W_NAV_L GAME)
COMBO(uj, &kp N7, 6 16, BASE CMK NAV_L WIN_L W_NAV_L GAME)
COMBO(ik, &kp N8, 7 17, BASE CMK NAV_L WIN_L W_NAV_L GAME)
COMBO(ol, &kp N9, 8 18, BASE CMK NAV_L WIN_L W_NAV_L GAME)
COMBO(p_quot, &kp N0, 9 19, BASE CMK NAV_L WIN_L W_NAV_L)

//left

// vertical

COMBO(az, &kp TAB, 10 20, BASE CMK NAV_L WIN_L W_NAV_L)
COMBO(sx, &kp LBKT, 11 21, BASE CMK NAV_L WIN_L W_NAV_L)
COMBO(dc, &kp RBKT, 12 22, BASE CMK NAV_L WIN_L W_NAV_L)
COMBO(fv, &kp LS(TAB), 13 23, BASE CMK NAV_L WIN_L W_NAV_L)

// horizontal

COMBO(qw, &kp GRAVE, 0 1, BASE CMK NAV_L WIN_L W_NAV_L)
COMBO(gb, &kp ENTER, 14 24, BASE CMK NAV_L WIN_L W_NAV_L)
COMBO(vb, &kp GRAVE, 23 24, BASE CMK NAV_L WIN_L W_NAV_L)

COMBO(df, &kp LA(BSPC), 12 13, BASE CMK NAV_L)
COMBO(fg, &kp LG(Z), 13 14, BASE CMK NAV_L)

COMBO(zx, &kp LG(X), 20 21, BASE CMK NAV_L)
COMBO(xc, &kp LG(C), 21 22, BASE CMK NAV_L)
COMBO(cv, &kp LG(V), 22 23, BASE CMK NAV_L)

COMBO(dfwin, &kp LC(BSPC), 12 13, WIN_L W_NAV_L)
COMBO(fgwin, &kp LC(Z), 13 14, WIN_L W_NAV_L)

COMBO(zxwin, &kp LC(X), 20 21, WIN_L W_NAV_L)
COMBO(xcwin, &kp LC(C), 21 22, WIN_L W_NAV_L)
COMBO(cvwin, &kp LC(V), 22 23, WIN_L W_NAV_L)


COMBO(sdf, &kp ESC, 2 3 4, BASE CMK NAV_L WIN_L W_NAV_L GAME)
COMBO(zxcv, &kp CAPSLOCK, 20 21 22 23, BASE CMK NAV_L WIN_L W_NAV_L)

//right 
// vertical
COMBO(jm, &kp LS(TAB), 16 26, BASE CMK NAV_L)
COMBO(k_comma, &kp MINUS, 17 27, BASE CMK NAV_L WIN_L W_NAV_L)
COMBO(l_period, &kp EQUAL, 18 28, BASE CMK NAV_L WIN_L W_NAV_L)
COMBO(quot_ques, &kp SEMI, 19 29, BASE CMK NAV_L WIN_L W_NAV_L)

// horiontal
COMBO(op, &kp RPAR, 8 9, BASE CMK NAV_L WIN_L W_NAV_L)
COMBO(io, &kp LPAR, 7 8, BASE CMK NAV_L WIN_L W_NAV_L)
COMBO(jkl, &kp ESC, 17 18 19, BASE CMK NAV_L WIN_L W_NAV_L)
COMBO(hj, &kp LG(LS(Z)), 15 16, BASE CMK NAV_L)
COMBO(jk, &kp LA(DEL), 16 17, BASE CMK NAV_L)
COMBO(nm, &kp LS(GRAVE), 25 26, BASE CMK NAV_L WIN_L W_NAV_L)
COMBO(period_ques, &kp LALT, 28 29, BASE CMK NAV_L)
COMBO(period_ques_win, &kp LGUI, 28 29, WIN_L W_NAV_L)

COMBO(hjwin, &kp LC(LS(Z)), 15 16, WIN_L W_NAV_L)
COMBO(jkwin, &kp LC(DEL), 16 17, WIN_L W_NAV_L)

